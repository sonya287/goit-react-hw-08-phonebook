{"version":3,"sources":["components/Alert/Alert.module.scss","components/Form/Form.module.scss","components/Error/Error.module.scss","components/ContactsList/ContactsList.module.scss","components/Filter/Filter.module.scss","views/ContactsViews/ContactsViews.module.scss","components/Alert/Alert.js","components/Form/Form.js","components/Error/Error.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","views/ContactsViews/ContactsViews.js"],"names":["module","exports","Alert","className","styles","alert","Form","state","name","number","getContactValue","e","currentTarget","value","setState","findContactName","contactName","props","contacts","find","handleSubmit","preventDefault","resetInput","setTimeout","addContact","this","onSubmit","form","CSSTransition","in","appear","timeout","classNames","unmountOnExit","label","inputs","type","autoComplete","pattern","title","required","onChange","button","React","Component","connect","getContacts","dispatch","phonebookOperations","Error","error","ContactsList","fetchContacts","deleteContact","isLoading","isError","TransitionGroup","component","list","map","id","item","item_name","item_number","onClick","getFilteredContacts","getLoading","getError","filter","getFilter","contact_filter","target","input","nodeRef","createRef","container","ref","contacts_container","contact_title","length"],"mappings":"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","file":"static/js/3.9354b014.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__-TtBx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3i36K\",\"label\":\"Form_label__1hdEx\",\"inputs\":\"Form_inputs__PYdff\",\"button\":\"Form_button__3GMIA\",\"enter\":\"Form_enter__O3Z7t\",\"enterActive\":\"Form_enterActive__JMKyO\",\"exit\":\"Form_exit__1crls\",\"exitActive\":\"Form_exitActive__1hkj-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error_error__3BbzB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__3pBK8\",\"item\":\"ContactsList_item__Qt_xN\",\"item_name\":\"ContactsList_item_name__sVfGW\",\"item_number\":\"ContactsList_item_number__sNoRp\",\"button\":\"ContactsList_button__3E3lh\",\"enter\":\"ContactsList_enter__3wLYo\",\"enterActive\":\"ContactsList_enterActive__1jyhp\",\"exit\":\"ContactsList_exit__2BFa6\",\"exitActive\":\"ContactsList_exitActive__30Dyn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__33mP6\",\"input\":\"Filter_input__14R-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsViews_container__1u6OJ\",\"contacts_container\":\"ContactsViews_contacts_container__3irNw\",\"contact_title\":\"ContactsViews_contact_title__3UWB_\",\"title\":\"ContactsViews_title__3e2fk\",\"appear\":\"ContactsViews_appear__1zcyL\",\"appearActive\":\"ContactsViews_appearActive__3lF-g\"};","import styles from './Alert.module.scss';\r\nconst Alert = () => {\r\n  return <div className={styles.alert}>Contact already exists</div>;\r\n};\r\nexport default Alert;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { phonebookOperations, getContacts } from '../../redux/phonebook';\r\n\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Alert from '../Alert';\r\n\r\nimport styles from './Form.module.scss';\r\n\r\nclass Form extends React.Component {\r\n  static propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n  };\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    alert: false,\r\n  };\r\n  getContactValue = e => {\r\n    const { value, name } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  findContactName = contactName => {\r\n    const { contacts } = this.props;\r\n    return contacts.find(({ name }) => name === contactName);\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    const { name, number } = this.state;\r\n    e.preventDefault();\r\n    if (this.findContactName(name)) {\r\n      this.resetInput();\r\n      this.setState({ alert: true });\r\n      setTimeout(() => this.setState({ alert: false }), 2000);\r\n\r\n      return;\r\n    }\r\n    this.props.addContact(name, number);\r\n    this.resetInput();\r\n  };\r\n  resetInput = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n  render() {\r\n    const { name, number, alert } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.form}>\r\n        <CSSTransition\r\n          in={alert}\r\n          appear\r\n          timeout={500}\r\n          classNames={styles}\r\n          unmountOnExit\r\n        >\r\n          <Alert />\r\n        </CSSTransition>\r\n        <label className={styles.label}>\r\n          Name\r\n          <input\r\n            className={styles.inputs}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            autoComplete=\"off\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.getContactValue}\r\n          />\r\n        </label>\r\n        <label className={styles.label}>\r\n          Number\r\n          <input\r\n            className={styles.inputs}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            autoComplete=\"off\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.getContactValue}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.button}>\r\n          add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: (name, number) =>\r\n    dispatch(phonebookOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import React from 'react';\r\nimport { error } from './Error.module.scss';\r\n\r\nexport const Error = () => {\r\n  return (\r\n    <div className={error}>\r\n      <h1>It seems like something is broken, we will fix it soon</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport {\r\n  phonebookOperations,\r\n  getFilteredContacts,\r\n  getLoading,\r\n  getError,\r\n} from '../../redux/phonebook';\r\nimport { Error } from '../Error';\r\nimport { Spinner } from '../Loader';\r\n\r\nimport styles from './ContactsList.module.scss';\r\n\r\nclass ContactsList extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { contacts, deleteContact, isLoading, isError } = this.props;\r\n    return (\r\n      <>\r\n        {isLoading && <Spinner />}\r\n        {isError && <Error />}\r\n        <TransitionGroup component=\"ul\" className={styles.list}>\r\n          {contacts.map(({ name, id, number }) => (\r\n            <CSSTransition key={id} timeout={500} classNames={styles}>\r\n              <li key={id} className={styles.item}>\r\n                <span className={styles.item_name}>{name}</span>\r\n                <span className={styles.item_number}>{number}</span>\r\n\r\n                <button\r\n                  className={styles.button}\r\n                  type=\"button\"\r\n                  onClick={() => deleteContact(id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n      </>\r\n    );\r\n  }\r\n}\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: getFilteredContacts(state),\r\n    isLoading: getLoading(state),\r\n    isError: getError(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(phonebookOperations.deleteContact(id)),\r\n  fetchContacts: () => dispatch(phonebookOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { contact_filter, getFilter } from '../../redux/phonebook';\r\n\r\nimport styles from './Filter.module.scss';\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <label className={styles.label}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.input}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        onChange={onChange}\r\n        value={filter}\r\n        autoComplete=\"off\"\r\n      />\r\n    </label>\r\n  );\r\n};\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n};\r\nconst mapStateToProps = state => ({\r\n  filter: getFilter(state),\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contact_filter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { getContacts } from '../../redux/phonebook';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Form from '../../components/Form';\r\nimport ContactsList from '../../components/ContactsList';\r\nimport Filter from '../../components/Filter';\r\n\r\nimport styles from './ContactsViews.module.scss';\r\n\r\nconst nodeRef = React.createRef(null);\r\n\r\nconst ContactsViews = ({ contacts }) => {\r\n  return (\r\n    <section className={styles.container}>\r\n      <CSSTransition\r\n        nodeRef={nodeRef}\r\n        in={true}\r\n        appear={true}\r\n        timeout={500}\r\n        classNames={{ ...styles }}\r\n        unmountOnExit\r\n      >\r\n        <h1 ref={nodeRef} className={styles.title}>\r\n          Phonebook\r\n        </h1>\r\n      </CSSTransition>\r\n\r\n      <Form></Form>\r\n      <div className={styles.contacts_container}>\r\n        <h2 className={styles.contact_title}>Contacts</h2>\r\n        {contacts.length > 1 && <Filter />}\r\n\r\n        <ContactsList />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactsViews);\r\n"],"sourceRoot":""}